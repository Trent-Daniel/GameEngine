{"message":"6 positional arguments in format string, but there are 5 arguments","code":null,"level":"error","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":2911,"byte_end":2917,"line_start":107,"line_end":107,"column_start":56,"column_end":62,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":56,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2919,"byte_end":2928,"line_start":107,"line_end":107,"column_start":64,"column_end":73,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":64,"highlight_end":73}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2930,"byte_end":2940,"line_start":107,"line_end":107,"column_start":75,"column_end":85,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":75,"highlight_end":85}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2942,"byte_end":2953,"line_start":107,"line_end":107,"column_start":87,"column_end":98,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":87,"highlight_end":98}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2955,"byte_end":2968,"line_start":107,"line_end":107,"column_start":100,"column_end":113,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":100,"highlight_end":113}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2891,"byte_end":2893,"line_start":107,"line_end":107,"column_start":36,"column_end":38,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":36,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2894,"byte_end":2896,"line_start":107,"line_end":107,"column_start":39,"column_end":41,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":39,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2897,"byte_end":2899,"line_start":107,"line_end":107,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2900,"byte_end":2902,"line_start":107,"line_end":107,"column_start":45,"column_end":47,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":45,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2903,"byte_end":2905,"line_start":107,"line_end":107,"column_start":48,"column_end":50,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":48,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":2906,"byte_end":2908,"line_start":107,"line_end":107,"column_start":51,"column_end":53,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":51,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 6 positional arguments in format string, but there are 5 arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:107:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\n\n"}
{"message":"6 positional arguments in format string, but there are 5 arguments","code":null,"level":"error","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":3074,"byte_end":3080,"line_start":109,"line_end":109,"column_start":55,"column_end":61,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":55,"highlight_end":61}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3082,"byte_end":3091,"line_start":109,"line_end":109,"column_start":63,"column_end":72,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":63,"highlight_end":72}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3093,"byte_end":3103,"line_start":109,"line_end":109,"column_start":74,"column_end":84,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":74,"highlight_end":84}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3105,"byte_end":3116,"line_start":109,"line_end":109,"column_start":86,"column_end":97,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":86,"highlight_end":97}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3118,"byte_end":3131,"line_start":109,"line_end":109,"column_start":99,"column_end":112,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":99,"highlight_end":112}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3054,"byte_end":3056,"line_start":109,"line_end":109,"column_start":35,"column_end":37,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":35,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3057,"byte_end":3059,"line_start":109,"line_end":109,"column_start":38,"column_end":40,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":38,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3060,"byte_end":3062,"line_start":109,"line_end":109,"column_start":41,"column_end":43,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":41,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3063,"byte_end":3065,"line_start":109,"line_end":109,"column_start":44,"column_end":46,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":44,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3066,"byte_end":3068,"line_start":109,"line_end":109,"column_start":47,"column_end":49,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":47,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\graphics\\windows.rs","byte_start":3069,"byte_end":3071,"line_start":109,"line_end":109,"column_start":50,"column_end":52,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":50,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 6 positional arguments in format string, but there are 5 arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:109:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\n\n"}
{"message":"unused import: `crate::engine::events::key_events::KeyEvent`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\engine\\application.rs","byte_start":237,"byte_end":280,"line_start":6,"line_end":6,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"use crate::engine::events::key_events::KeyEvent;","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\engine\\application.rs","byte_start":233,"byte_end":281,"line_start":6,"line_end":6,"column_start":1,"column_end":49,"is_primary":true,"text":[{"text":"use crate::engine::events::key_events::KeyEvent;","highlight_start":1,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `crate::engine::events::key_events::KeyEvent`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\engine\\application.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse crate::engine::events::key_events::KeyEvent;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused macro definition","code":{"code":"unused_macros","explanation":null},"level":"warning","spans":[{"file_name":"src\\engine\\utils\\macros.rs","byte_start":622,"byte_end":872,"line_start":21,"line_end":32,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"macro_rules! get_this_struct_name","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    ($cls: expr) =>","highlight_start":1,"highlight_end":20},{"text":"    {{","highlight_start":1,"highlight_end":7},{"text":"        fn type_name_of<T>(_: T) -> &'static str","highlight_start":1,"highlight_end":49},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            std::any::type_name::<T>()","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let name = type_name_of($cls);","highlight_start":1,"highlight_end":39},{"text":"        &name[..name.len() - 3]","highlight_start":1,"highlight_end":32},{"text":"    }}","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused macro definition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\engine\\utils\\macros.rs:21:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmacro_rules! get_this_struct_name\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ($cls: expr) =>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    {{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_macros)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `get_this_struct_name`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\engine\\utils\\macros.rs","byte_start":1861,"byte_end":1881,"line_start":77,"line_end":77,"column_start":16,"column_end":36,"is_primary":true,"text":[{"text":"pub(crate) use get_this_struct_name;","highlight_start":16,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\engine\\utils\\macros.rs","byte_start":1846,"byte_end":1882,"line_start":77,"line_end":77,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"pub(crate) use get_this_struct_name;","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `get_this_struct_name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\engine\\utils\\macros.rs:77:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub(crate) use get_this_struct_name;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type `c_ushort` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":54,"byte_end":62,"line_start":3,"line_end":3,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"pub type c_ushort = u16;","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":54,"byte_end":62,"line_start":3,"line_end":3,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"pub type c_ushort = u16;","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":"CUshort","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `c_ushort` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:3:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type c_ushort = u16;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `CUshort`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"message":"type `c_ulong` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":127,"byte_end":134,"line_start":6,"line_end":6,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"pub type c_ulong = u32;","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":127,"byte_end":134,"line_start":6,"line_end":6,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"pub type c_ulong = u32;","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":"CUlong","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `c_ulong` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:6:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type c_ulong = u32;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `CUlong`\u001b[0m\n\n"}
{"message":"type `c_long` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":291,"byte_end":297,"line_start":12,"line_end":12,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type c_long = i32;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":291,"byte_end":297,"line_start":12,"line_end":12,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type c_long = i32;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":"CLong","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `c_long` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:12:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type c_long = i32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `CLong`\u001b[0m\n\n"}
{"message":"type `ULONG_PTR` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":400,"byte_end":409,"line_start":16,"line_end":16,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"pub type ULONG_PTR = usize;","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":400,"byte_end":409,"line_start":16,"line_end":16,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"pub type ULONG_PTR = usize;","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":"UlongPtr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `ULONG_PTR` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:16:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type ULONG_PTR = usize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `UlongPtr`\u001b[0m\n\n"}
{"message":"type `wchar_t` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":965,"byte_end":972,"line_start":35,"line_end":35,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"pub type wchar_t = u16;","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":965,"byte_end":972,"line_start":35,"line_end":35,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"pub type wchar_t = u16;","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":"WcharT","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `wchar_t` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:35:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type wchar_t = u16;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `WcharT`\u001b[0m\n\n"}
{"message":"type `LONG_PTR` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1332,"byte_end":1340,"line_start":44,"line_end":44,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"pub type LONG_PTR = isize;","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1332,"byte_end":1340,"line_start":44,"line_end":44,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"pub type LONG_PTR = isize;","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":"LongPtr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `LONG_PTR` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:44:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type LONG_PTR = isize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `LongPtr`\u001b[0m\n\n"}
{"message":"type `UINT_PTR` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1359,"byte_end":1367,"line_start":45,"line_end":45,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"pub type UINT_PTR = usize;","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1359,"byte_end":1367,"line_start":45,"line_end":45,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"pub type UINT_PTR = usize;","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":"UintPtr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `UINT_PTR` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:45:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type UINT_PTR = usize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `UintPtr`\u001b[0m\n\n"}
{"message":"type `c_int` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1685,"byte_end":1690,"line_start":58,"line_end":58,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"pub type c_int = i32;","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1685,"byte_end":1690,"line_start":58,"line_end":58,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"pub type c_int = i32;","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":"CInt","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `c_int` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:58:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type c_int = i32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `CInt`\u001b[0m\n\n"}
{"message":"type `c_uint` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1707,"byte_end":1713,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type c_uint = u32;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows\\types.rs","byte_start":1707,"byte_end":1713,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type c_uint = u32;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":"CUint","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type `c_uint` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows\\types.rs:59:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub type c_uint = u32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: convert the identifier to upper camel case: `CUint`\u001b[0m\n\n"}
{"message":"unused import: `null`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":97,"byte_end":101,"line_start":7,"line_end":7,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use core::ptr::{null, null_mut};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":97,"byte_end":103,"line_start":7,"line_end":7,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"use core::ptr::{null, null_mut};","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `null`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:7:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse core::ptr::{null, null_mut};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\n\n"}
{"message":"`*mut c_void` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":2911,"byte_end":2917,"line_start":107,"line_end":107,"column_start":56,"column_end":62,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":56,"highlight_end":62}],"label":"`*mut c_void` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2800,"byte_end":2833,"line_start":97,"line_end":97,"column_start":28,"column_end":61,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\graphics\\windows.rs","byte_start":2868,"byte_end":2969,"line_start":107,"line_end":107,"column_start":13,"column_end":114,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":13,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2692,"byte_end":2844,"line_start":94,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\core\\src\\macros\\mod.rs","byte_start":29954,"byte_end":30111,"line_start":866,"line_end":869,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `*mut c_void`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `*mut c_void` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:107:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`*mut c_void` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `*mut c_void`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`c_structs::RECT` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":2930,"byte_end":2940,"line_start":107,"line_end":107,"column_start":75,"column_end":85,"is_primary":true,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":75,"highlight_end":85}],"label":"`c_structs::RECT` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2800,"byte_end":2833,"line_start":97,"line_end":97,"column_start":28,"column_end":61,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\graphics\\windows.rs","byte_start":2868,"byte_end":2969,"line_start":107,"line_end":107,"column_start":13,"column_end":114,"is_primary":false,"text":[{"text":"            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":13,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2692,"byte_end":2844,"line_start":94,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\core\\src\\macros\\mod.rs","byte_start":29954,"byte_end":30111,"line_start":866,"line_end":869,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `c_structs::RECT`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `c_structs::RECT` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:107:75\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            println!(\"ps before is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`c_structs::RECT` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `c_structs::RECT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`*mut c_void` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":3074,"byte_end":3080,"line_start":109,"line_end":109,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":55,"highlight_end":61}],"label":"`*mut c_void` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2800,"byte_end":2833,"line_start":97,"line_end":97,"column_start":28,"column_end":61,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\graphics\\windows.rs","byte_start":3032,"byte_end":3132,"line_start":109,"line_end":109,"column_start":13,"column_end":113,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":13,"highlight_end":113}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2692,"byte_end":2844,"line_start":94,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\core\\src\\macros\\mod.rs","byte_start":29954,"byte_end":30111,"line_start":866,"line_end":869,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `*mut c_void`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `*mut c_void` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:109:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`*mut c_void` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `*mut c_void`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`c_structs::RECT` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\graphics\\windows.rs","byte_start":3093,"byte_end":3103,"line_start":109,"line_end":109,"column_start":74,"column_end":84,"is_primary":true,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":74,"highlight_end":84}],"label":"`c_structs::RECT` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2800,"byte_end":2833,"line_start":97,"line_end":97,"column_start":28,"column_end":61,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\graphics\\windows.rs","byte_start":3032,"byte_end":3132,"line_start":109,"line_end":109,"column_start":13,"column_end":113,"is_primary":false,"text":[{"text":"            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);","highlight_start":13,"highlight_end":113}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\std\\src\\macros.rs","byte_start":2692,"byte_end":2844,"line_start":94,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\core\\src\\macros\\mod.rs","byte_start":29954,"byte_end":30111,"line_start":866,"line_end":869,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `c_structs::RECT`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `c_structs::RECT` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\graphics\\windows.rs:109:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            println!(\"ps after is {} {} {} {} {} {}\", ps.hdc, ps.fErase, ps.rcPaint, ps.fRestore, ps.fIncUpdate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`c_structs::RECT` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `c_structs::RECT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors; 13 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 6 previous errors; 13 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
